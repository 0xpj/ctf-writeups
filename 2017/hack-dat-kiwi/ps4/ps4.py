import itertools

cipher = 'c4 83 9e 11 19 81 6f b6 ea c0 f3 a0 a4 6a 33 2b 24 07 8a d1 68 07 3f 58 a2 b8 61 4e 76 ed b8 81 1e 07 9e 5b 77 80 37 ad b3 02 b6 7b 7e 20 ca a6 34 c5 78 46 e4 61 37 2e 18 c3 2c 13 02 ca ed bb 24 c5 9b 8b 7b cb 03 5a 40 5e 2c 65 a0 89 6e 36 24 07 ca d1 19 4b 07 8e a2 c0 79 65 ea 88 8b a1 92 7d 9e 9c 28 11 b5 58 ea 02 ef d4 c7 5a 6e bb c4 7d ca fd e4 19 6a 8e 1c c0 2c 5c 20 20 02 35 1e 07 9e 8b 19 80 37 b6 e1 89 64 4e a0 0e 8b 81 3e 1a 1a d1 ff fb 3f cd 65 b8 60 4e 7e 19 b9 4d 34 c5 9e 36 77 80 fd 5a e1 ae c9 e4 38 89 6e 8e 0f 58 ca e8 ff 11 b5 77 65 97 6d 65 27 6a 33 bb cb 23 6a d6 10 11 de b0 18 92 ef 21 76 7c b9 bb b4 c5 89 8b b8 cb 37 2c e1 b1 0d 6d f0 3d b9 7f cb 23 ad cf ae 2d 6a 77 ea 2a b6 2c a0 ed 42 18 24 83 51 d1 4c d6 d4 b0 79 50 b6 6e 76 82 8d 8e 24 c5 95 c7 4c 11 73 2c c7 b8 61 a0 34 8a 33 8d 0f 88 9e 36 ae fb fd 2e ea ae c9 e4 38 89 ae 8e b4 c5 89 8b ff 11 37 2c e1 c3 ef 6d 02 88 b9 bb 34 7d 9e ba 19 4b 50 7f 79 c0 6d db 4a ca ed 36 cb e0 f7 a9 d1 6f 6f 8e f2 02 a2 2c 9d 89 02 8d 0a f0 27 c9 70 d2 37 b6 18 46 ef 4e 98 89 33 d8 b4 c5 89 8b ae 4c 37 2c e1 5e 2f 6d 02 ed b9 7f 24 4b c7 ae 19 d2 c5 72 6f 02 60 2c a8 ee ae 89 cb e8 78 e8 19 4b cc 8e ad c0 f3 13 45 88 8b 36 16 07 9e b2 e4 a8 9c 8e 69 c0 2c e4 e6 32 b9 34 3e b9 02 8b ae 1f 37 8e 18 46 29 5d 98 6a 6e 81 73 ed 9b cf ae 4c 9c 72 40 50 2f 4e fa 21 b9 7f 34 93 52 ae b8 28 6f 77 e1 86 2c a0 7e 89 ae 35 cb 07 94 d1 19 c7 03 e9 f2 c0 b6 fd 22 fc ae aa 80 88 9e 11 28 a8 6f a9 69 c0 92 a0 ec 0e 8d 7f b0 57 ad 44 b8 84 07 5d 18 b8 92 a0 7e 21 6b 8e 2b 20 ad d3 78 6f 37 77 79 cf a2 49 ea cc 6e 8e 63 1a 9e b2 ae 6f 9c a9 65 c0 b6 e4 02 89 ce 8e 24 e4 02 cf 19 1f 37 b0 b0 5e 79 db 98 ee b8 e9 0f 20 b8 b2 88 5e 37 b6 77 5e 2c 9d 98 20 32 bb 4c 9e 02 d1 4c 11 23 77 b0 5e 79 a0 22 8a 33 7f 0f 1e 9b d1 10 11 3f 77 77 86 79 1d 7e 93 6e 57 63 93 78 21 28 11 48 b6 f2 86 60 65 27 ed b9 5a 2b 88 1a d1 19 82 de 5a ad 55 64 7b 76 ca b9 bb 16 07 05 2a 19 82 bc b6 18 2a 2f 2c 02 93 b9 7f cb 23 79 b2 28 11 20 b0 18 46 f3 c0 27 ed b9 08 0a f0 9e 02 ff b5 20 e9 e1 5e f9 c0 a0 19 ae 8e 9c 1a 9e 7d b8 cb 6f 5b e1 89 a2 13 ec 78 b9 a9 24 c5 02 8b 7b 28 97 e9 2b b8 2c db 34 89 6b 35 24 60 51 d1 ae 6f 3f ad 79 b8 b6 4e 76 89 32 8e 84 c5 1a d1 e4 5e 3f b0 b0 b8 a2 4e 7e 32 93 08 34 60 ca ba 4c a8 cb c9 18 b8 c9 2c e6 32 96 8e 24 e4 02 cf 4c 5e 6f b0 b0 b8 41 2c 34 89 b8 a9 24 88 f2 45 19 a8 fd 77 5e ed 64 5d a0 93 02 57 cb 60 7c d1 47 cb 20 8e 77 4d 45 43 ea 82 f4 8e c4 e8 9e b2 b8 81 9c 6b 5e c0 92 e4 6a 88 b9 bb 63 7d f7 c9 28 4c 6a a9 77 b8 a2 db c7 5a ae a9 0a 93 89 45 f6 01 fd ad e1 55 a6 2c a0 89 af 36 0f 83 7c d1 4c cb fd b6 77 50 2f 6c 5e 89 33 8e 59 2d f2 d1 77 5d 9c a2 19 86 c9 c0 34 32 63 bb 2b 69 ea d1 7b 11 07 77 6f c0 2f 65 a4 20 93 8d f1 89 29 ef 11 fb 22 b0 94 f5 45 09 12 33 f3 ad 34 1a f2 21 28 1f ef 77 18 5e cb 6e 5e 0e 8b 8e cb 23 8a 8b 50 6f 9c b0 18 c0 2c 6c ec 88 b9 34 92 57 9e 11 e4 a8 de 6b 04 d0 2c c0 76 32 b9 d5 24 83 02 8b 0a 81 d4 0d 2b b8 92 6d 7e 93 6b 1e 80 c5 8a b2 19 76 03 b0 e1 ed 60 65 5e 90 ed 5a 2b 69 ea d1 4c 11 de 77 6f 55 d6 7b 76 8a 33 34 2b 88 f2 46 b9 28 9c 5a 77 c0 f3 57 02 89 af 36 73 88 9e 8b e4 a8 37 2c e1 5e 2c 5d 98 32 b9 d5 3e 93 78 46 b8 81 13 ff a2 b8 2c 2c fa 0e 93 bb cb e8 8a ba ec 10 37 77 6f 4d 34 db 6a 8a 33 7a 0f 83 c7 d1 50 61 07 0d 79 c0 2c 65 a0 5a ce a9 0a 60 9e 45 4c 61 48 77 e1 b8 c9 6e 76 19 4e a1 0f 58 51 78 7b 11 20 77 ad 02 6d 5d 7e 20 93 7f 83 1a 9e ba e4 61 9c 2e 04 c0 2c db 45 ca ed b1 cb 23 3e cf 50 11 37 b0 18 46 79 9d 98 5e b9 81 b4 c5 89 8b ae 4c 37 2c e1 02 2f 6d ea ed b9 7f 83 ce 9e d3 ae 1f 3b 58 33 89 79 13 12 89 93 8e 80 c5 9e 36 96 6f fd fe bc ae c9 e4 38 89 33 8e 80 c5 9e e8 b8 28 23 fe bc ae 2c a0 a4 89 33 bb 4e 69 8a cf 57 81 37 ad 1c 02 87 5d 30 89 f6 8e 0a 60 9e c7 ff 11 6a 77 e1 89 92 65 12 19 f4 bb 1e 07 ca 44 ff 1f 37 ad 18 46 45 13 02 5a c2 8e 24 60 c7 d1 88 81 37 67 a2 40 f3 6e a0 88 33 1e cb 57 9e 06 5d 11 03 c9 bd ae 41 6e a0 20 96 a9 24 07 51 d1 e0 3a 03 8e a2 c0 17 6e ec dc a3 a9 34 7d 67 cf 5d 84 de d8 79 03 79 e4 76 4e 33 36 c4 7d f2 d1 ff a8 d4 2c ea 86 32 8d 02 93 ed 8d 80 ed f2 45 62 81 de 72 f2 ae 79 8d a4 88 b9 d8 83 ed 9e 36 19 4c e3 77 e1 2a 2f 65 a0 88 6b 81 45 7d 78 ef 62 81 38 b6 ea 1a 79 db 5e 88 e0 a9 92 7d ca 8b 4c 6f 13 b0 b0 4c a2 1d 76 32 59 7f 4d c5 f7 d1 4d 11 3f 2c 18 02 92 1d 34 20 93 8d 3e 07 ac b2 78 11 de ad e1 55 2f 2c 76 19 ae bb 0f f0 02 cf b9 cb 6a 6a 40 b8 f3 c0 c7 32 ed 08 99 4b 02 cf 4c 84 ef 72 b0 02 2c 2c 7e 88 ae 36 83 88 9e ae 28 d2 c5 77 33 4d 9a 65 9d 20 ed a6 cb 4b b8 b2 b8 cb cb b6 18 cf a2 2c ea 89 96 d5 c4 69 9e b2 68 61 9c 77 f2 c0 a2 e4 ec 19 6e a6 3e 7d 9e e8 5d 84 ef d8 79 02 79 13 30 4e 33 36 cb 4b 94 d1 4c 11 37 77 bc c0 92 2c 76 8a 33 bb'.split()
cipher = [chr(int(blah, 16)) for blah in cipher][:640]

sbox_0 = {0: 84, 1: 72, 2: 153, 3: 203, 4: 93, 5: 105, 6: 2, 7: 19, 8: 129, 9: 70, 10: 3, 11: 188, 12: 24, 13: 98,
          14: 171, 15: 109, 16: 34, 17: 155, 18: 209, 19: 132, 20: 134, 21: 133, 22: 112, 23: 46, 24: 137, 25: 28,
          26: 36, 27: 255, 28: 251, 29: 62, 30: 194, 31: 81, 32: 140, 33: 90, 34: 27, 35: 229, 36: 196, 37: 31, 38: 246,
          39: 65, 40: 103, 41: 249, 42: 248, 43: 124, 44: 91, 45: 168, 46: 227, 47: 123, 48: 58, 49: 181, 50: 250,
          51: 190, 52: 52, 53: 107, 54: 233, 55: 185, 56: 135, 57: 11, 58: 184, 59: 128, 60: 73, 61: 120, 62: 210,
          63: 211, 64: 208, 65: 234, 66: 177, 67: 147, 68: 8, 69: 170, 70: 212, 71: 104, 72: 164, 73: 204, 74: 230,
          75: 254, 76: 108, 77: 200, 78: 116, 79: 166, 80: 119, 81: 110, 82: 95, 83: 176, 84: 221, 85: 75, 86: 99,
          87: 86, 88: 85, 89: 33, 90: 223, 91: 167, 92: 154, 93: 174, 94: 118, 95: 97, 96: 152, 97: 41, 98: 253,
          99: 160, 100: 218, 101: 206, 102: 14, 103: 125, 104: 151, 105: 243, 106: 121, 107: 10, 108: 193, 109: 244,
          110: 180, 111: 54, 112: 94, 113: 29, 114: 239, 115: 61, 116: 111, 117: 79, 118: 169, 119: 215, 120: 130,
          121: 141, 122: 122, 123: 26, 124: 50, 125: 252, 126: 143, 127: 217, 128: 39, 129: 142, 130: 114, 131: 7,
          132: 77, 133: 145, 134: 138, 135: 245, 136: 131, 137: 9, 138: 6, 139: 60, 140: 4, 141: 195, 142: 146,
          143: 100, 144: 226, 145: 117, 146: 191, 147: 71, 148: 225, 149: 87, 150: 44, 151: 83, 152: 242, 153: 183,
          154: 144, 155: 47, 156: 186, 157: 22, 158: 18, 159: 228, 160: 173, 161: 150, 162: 237, 163: 15, 164: 37,
          165: 113, 166: 12, 167: 178, 168: 136, 169: 20, 170: 241, 171: 149, 172: 213, 173: 126, 174: 1, 175: 189,
          176: 17, 177: 198, 178: 32, 179: 235, 180: 49, 181: 66, 182: 74, 183: 45, 184: 13, 185: 224, 186: 89,
          187: 197, 188: 16, 189: 127, 190: 165, 191: 182, 192: 35, 193: 159, 194: 201, 195: 57, 196: 38, 197: 207,
          198: 236, 199: 162, 200: 220, 201: 231, 202: 53, 203: 175, 204: 88, 205: 56, 206: 96, 207: 106, 208: 0,
          209: 148, 210: 82, 211: 51, 212: 219, 213: 202, 214: 76, 215: 232, 216: 179, 217: 199, 218: 158, 219: 187,
          220: 63, 221: 67, 222: 92, 223: 69, 224: 240, 225: 43, 226: 161, 227: 23, 228: 21, 229: 156, 230: 172,
          231: 238, 232: 101, 233: 222, 234: 139, 235: 247, 236: 40, 237: 30, 238: 80, 239: 48, 240: 163, 241: 216,
          242: 64, 243: 102, 244: 192, 245: 157, 246: 68, 247: 59, 248: 78, 249: 25, 250: 42, 251: 214, 252: 115,
          253: 205, 254: 5, 255: 55, }
sbox_1 = {0: 248, 1: 12, 2: 142, 3: 6, 4: 168, 5: 72, 6: 246, 7: 48, 8: 58, 9: 162, 10: 45, 11: 105, 12: 197, 13: 174,
          14: 153, 15: 121, 16: 161, 17: 2, 18: 16, 19: 102, 20: 210, 21: 144, 22: 228, 23: 112, 24: 192, 25: 36,
          26: 99, 27: 70, 28: 222, 29: 198, 30: 195, 31: 215, 32: 208, 33: 80, 34: 221, 35: 119, 36: 150, 37: 212,
          38: 166, 39: 209, 40: 115, 41: 214, 42: 55, 43: 59, 44: 128, 45: 211, 46: 179, 47: 33, 48: 217, 49: 190,
          50: 133, 51: 160, 52: 81, 53: 104, 54: 22, 55: 19, 56: 141, 57: 120, 58: 86, 59: 108, 60: 62, 61: 28, 62: 68,
          63: 15, 64: 109, 65: 37, 66: 138, 67: 7, 68: 250, 69: 51, 70: 224, 71: 113, 72: 9, 73: 23, 74: 175, 75: 140,
          76: 236, 77: 95, 78: 178, 79: 189, 80: 40, 81: 61, 82: 98, 83: 126, 84: 171, 85: 127, 86: 147, 87: 60,
          88: 251, 89: 237, 90: 173, 91: 54, 92: 5, 93: 243, 94: 75, 95: 117, 96: 25, 97: 216, 98: 129, 99: 17, 100: 8,
          101: 88, 102: 134, 103: 20, 104: 107, 105: 47, 106: 163, 107: 85, 108: 151, 109: 78, 110: 21, 111: 188,
          112: 143, 113: 124, 114: 52, 115: 50, 116: 245, 117: 201, 118: 110, 119: 239, 120: 181, 121: 27, 122: 41,
          123: 185, 124: 10, 125: 116, 126: 44, 127: 38, 128: 76, 129: 176, 130: 57, 131: 84, 132: 253, 133: 186,
          134: 94, 135: 111, 136: 229, 137: 244, 138: 194, 139: 118, 140: 71, 141: 206, 142: 35, 143: 204, 144: 73,
          145: 91, 146: 247, 147: 63, 148: 26, 149: 103, 150: 34, 151: 202, 152: 136, 153: 79, 154: 135, 155: 148,
          156: 191, 157: 167, 158: 170, 159: 249, 160: 69, 161: 220, 162: 67, 163: 66, 164: 145, 165: 164, 166: 177,
          167: 97, 168: 156, 169: 96, 170: 218, 171: 223, 172: 32, 173: 238, 174: 158, 175: 106, 176: 64, 177: 154,
          178: 169, 179: 89, 180: 240, 181: 199, 182: 14, 183: 101, 184: 0, 185: 152, 186: 233, 187: 193, 188: 39,
          189: 139, 190: 183, 191: 114, 192: 87, 193: 235, 194: 182, 195: 226, 196: 132, 197: 65, 198: 43, 199: 11,
          200: 184, 201: 254, 202: 231, 203: 213, 204: 232, 205: 123, 206: 46, 207: 30, 208: 1, 209: 219, 210: 130,
          211: 242, 212: 146, 213: 155, 214: 83, 215: 149, 216: 24, 217: 56, 218: 74, 219: 77, 220: 205, 221: 234,
          222: 187, 223: 18, 224: 225, 225: 92, 226: 241, 227: 90, 228: 165, 229: 29, 230: 122, 231: 53, 232: 13,
          233: 93, 234: 4, 235: 3, 236: 203, 237: 125, 238: 49, 239: 207, 240: 42, 241: 196, 242: 200, 243: 180,
          244: 100, 245: 31, 246: 131, 247: 157, 248: 159, 249: 172, 250: 230, 251: 82, 252: 227, 253: 137, 254: 252,
          255: 255, }
sbox_2 = {0: 148, 1: 13, 2: 115, 3: 50, 4: 45, 5: 217, 6: 119, 7: 72, 8: 31, 9: 136, 10: 73, 11: 222, 12: 203, 13: 109,
          14: 160, 15: 224, 16: 11, 17: 82, 18: 126, 19: 61, 20: 93, 21: 168, 22: 142, 23: 165, 24: 12, 25: 30, 26: 174,
          27: 92, 28: 97, 29: 204, 30: 125, 31: 244, 32: 215, 33: 240, 34: 37, 35: 2, 36: 199, 37: 156, 38: 75, 39: 233,
          40: 34, 41: 147, 42: 196, 43: 237, 44: 255, 45: 99, 46: 200, 47: 10, 48: 180, 49: 69, 50: 71, 51: 17, 52: 236,
          53: 211, 54: 176, 55: 249, 56: 242, 57: 89, 58: 84, 59: 80, 60: 36, 61: 205, 62: 65, 63: 251, 64: 186,
          65: 106, 66: 253, 67: 133, 68: 4, 69: 70, 70: 111, 71: 40, 72: 216, 73: 49, 74: 20, 75: 214, 76: 149, 77: 219,
          78: 227, 79: 74, 80: 35, 81: 48, 82: 91, 83: 16, 84: 3, 85: 8, 86: 9, 87: 245, 88: 107, 89: 101, 90: 78,
          91: 140, 92: 51, 93: 144, 94: 135, 95: 231, 96: 243, 97: 132, 98: 118, 99: 248, 100: 193, 101: 218, 102: 38,
          103: 164, 104: 22, 105: 56, 106: 130, 107: 167, 108: 23, 109: 108, 110: 234, 111: 58, 112: 153, 113: 77,
          114: 76, 115: 157, 116: 87, 117: 86, 118: 150, 119: 181, 120: 175, 121: 208, 122: 59, 123: 210, 124: 104,
          125: 187, 126: 190, 127: 94, 128: 60, 129: 52, 130: 88, 131: 6, 132: 24, 133: 123, 134: 177, 135: 41,
          136: 171, 137: 46, 138: 201, 139: 185, 140: 151, 141: 188, 142: 238, 143: 39, 144: 254, 145: 57, 146: 189,
          147: 90, 148: 137, 149: 83, 150: 0, 151: 53, 152: 32, 153: 67, 154: 14, 155: 141, 156: 247, 157: 202,
          158: 220, 159: 63, 160: 252, 161: 44, 162: 79, 163: 21, 164: 162, 165: 229, 166: 66, 167: 96, 168: 26, 169: 1,
          170: 246, 171: 170, 172: 184, 173: 228, 174: 197, 175: 179, 176: 42, 177: 143, 178: 15, 179: 163, 180: 209,
          181: 19, 182: 207, 183: 239, 184: 100, 185: 213, 186: 128, 187: 85, 188: 161, 189: 110, 190: 127, 191: 159,
          192: 131, 193: 173, 194: 182, 195: 29, 196: 154, 197: 230, 198: 113, 199: 172, 200: 226, 201: 105, 202: 103,
          203: 158, 204: 68, 205: 43, 206: 117, 207: 120, 208: 178, 209: 121, 210: 7, 211: 139, 212: 129, 213: 221,
          214: 134, 215: 194, 216: 191, 217: 241, 218: 250, 219: 98, 220: 64, 221: 116, 222: 5, 223: 195, 224: 33,
          225: 183, 226: 223, 227: 169, 228: 152, 229: 55, 230: 114, 231: 145, 232: 146, 233: 198, 234: 54, 235: 212,
          236: 232, 237: 124, 238: 47, 239: 138, 240: 18, 241: 81, 242: 27, 243: 122, 244: 28, 245: 166, 246: 95,
          247: 225, 248: 155, 249: 62, 250: 102, 251: 235, 252: 192, 253: 25, 254: 206, 255: 112, }
sbox_3 = {0: 245, 1: 135, 2: 127, 3: 156, 4: 199, 5: 237, 6: 48, 7: 93, 8: 179, 9: 107, 10: 57, 11: 157, 12: 11,
          13: 120, 14: 52, 15: 20, 16: 192, 17: 82, 18: 147, 19: 226, 20: 236, 21: 203, 22: 186, 23: 124, 24: 255,
          25: 242, 26: 88, 27: 161, 28: 43, 29: 1, 30: 100, 31: 35, 32: 137, 33: 229, 34: 191, 35: 78, 36: 212, 37: 241,
          38: 173, 39: 133, 40: 91, 41: 232, 42: 36, 43: 104, 44: 97, 45: 87, 46: 126, 47: 32, 48: 175, 49: 16, 50: 5,
          51: 155, 52: 219, 53: 193, 54: 26, 55: 218, 56: 178, 57: 115, 58: 123, 59: 225, 60: 116, 61: 228, 62: 8,
          63: 3, 64: 202, 65: 198, 66: 77, 67: 160, 68: 184, 69: 6, 70: 45, 71: 29, 72: 240, 73: 80, 74: 134, 75: 79,
          76: 172, 77: 10, 78: 117, 79: 95, 80: 28, 81: 128, 82: 253, 83: 248, 84: 62, 85: 27, 86: 211, 87: 244,
          88: 144, 89: 81, 90: 213, 91: 13, 92: 60, 93: 221, 94: 17, 95: 12, 96: 168, 97: 98, 98: 167, 99: 103,
          100: 102, 101: 214, 102: 132, 103: 83, 104: 47, 105: 18, 106: 170, 107: 220, 108: 24, 109: 41, 110: 66,
          111: 53, 112: 162, 113: 65, 114: 44, 115: 223, 116: 90, 117: 252, 118: 208, 119: 231, 120: 84, 121: 174,
          122: 243, 123: 142, 124: 145, 125: 0, 126: 150, 127: 63, 128: 105, 129: 68, 130: 165, 131: 197, 132: 31,
          133: 46, 134: 38, 135: 73, 136: 58, 137: 201, 138: 42, 139: 76, 140: 238, 141: 111, 142: 129, 143: 149,
          144: 164, 145: 159, 146: 118, 147: 250, 148: 154, 149: 71, 150: 224, 151: 234, 152: 246, 153: 206, 154: 121,
          155: 138, 156: 207, 157: 19, 158: 188, 159: 59, 160: 86, 161: 108, 162: 7, 163: 113, 164: 148, 165: 40,
          166: 182, 167: 195, 168: 239, 169: 210, 170: 21, 171: 217, 172: 64, 173: 139, 174: 112, 175: 216, 176: 37,
          177: 222, 178: 204, 179: 181, 180: 49, 181: 180, 182: 166, 183: 30, 184: 143, 185: 50, 186: 158, 187: 106,
          188: 61, 189: 101, 190: 169, 191: 136, 192: 200, 193: 176, 194: 251, 195: 92, 196: 205, 197: 163, 198: 34,
          199: 190, 200: 125, 201: 55, 202: 153, 203: 194, 204: 185, 205: 23, 206: 151, 207: 233, 208: 2, 209: 114,
          210: 146, 211: 51, 212: 70, 213: 75, 214: 72, 215: 227, 216: 110, 217: 249, 218: 69, 219: 177, 220: 89,
          221: 247, 222: 56, 223: 33, 224: 141, 225: 54, 226: 131, 227: 119, 228: 235, 229: 187, 230: 67, 231: 109,
          232: 254, 233: 230, 234: 39, 235: 171, 236: 9, 237: 215, 238: 130, 239: 14, 240: 96, 241: 74, 242: 85,
          243: 183, 244: 152, 245: 122, 246: 140, 247: 15, 248: 99, 249: 209, 250: 196, 251: 189, 252: 94, 253: 4,
          254: 22, 255: 25, }

pbox_0 = {0: 5, 1: 4, 2: 10, 3: 13, 4: 6, 5: 7, 6: 0, 7: 1, 8: 9, 9: 3, 10: 2, 11: 14, 12: 8, 13: 12, 14: 15, 15: 11, }
pbox_1 = {0: 2, 1: 9, 2: 13, 3: 7, 4: 8, 5: 6, 6: 5, 7: 1, 8: 11, 9: 0, 10: 3, 11: 15, 12: 14, 13: 4, 14: 12, 15: 10, }
pbox_2 = {0: 8, 1: 5, 2: 1, 3: 14, 4: 12, 5: 2, 6: 15, 7: 4, 8: 7, 9: 13, 10: 11, 11: 6, 12: 3, 13: 9, 14: 10, 15: 0, }
pbox_3 = {0: 3, 1: 11, 2: 15, 3: 10, 4: 2, 5: 6, 6: 14, 7: 9, 8: 7, 9: 0, 10: 12, 11: 5, 12: 4, 13: 8, 14: 13, 15: 1, }

blocks = [cipher[i:i + 16] for i in range(0, len(cipher), 16)]
columns = list(itertools.izip_longest(*blocks))

key_dict = {}
sol_dict = {}
solution = [None for _ in range(16)]


def get_key_from_val(d, val):
    for k, v in d.iteritems():
        if v == val:
            return k


def find_solve_range(col_, x):
    poss_ = []
    keys = key_dict[col_]

    k1_list = range(256) if not solution[keys[0]] else [solution[keys[0]]]
    for k_3 in k1_list:
        xor_3 = k_3 ^ x
        s_3 = get_key_from_val(sbox_3, xor_3)

        k2_list = range(256) if not solution[keys[1]] else [solution[keys[1]]]
        for k_2 in k2_list:
            xor_2 = k_2 ^ s_3
            s_2 = get_key_from_val(sbox_2, xor_2)

            k3_list = [k_3] if col_ == 12 else range(256)
            k3_list = k3_list if not solution[keys[2]] else [solution[keys[2]]]
            for k_1 in k3_list:
                xor_1 = k_1 ^ s_2
                s_1 = get_key_from_val(sbox_1, xor_1)

                k4_list = range(256) if not solution[keys[3]] else [solution[keys[3]]]
                for k_0 in k4_list:
                    xor_0 = k_0 ^ s_1
                    s_0 = get_key_from_val(sbox_0, xor_0)

                    if 32 <= s_0 <= 127 or 9 <= s_0 <= 13:
                        poss_.append((k_3, k_2, k_1, k_0))

    return poss_


def get_col_to_solve():
    min = 4
    min_c = 0
    for k, v in sol_dict.items():
        if not solution[k] and len(v) < min:
            min = len(v)
            min_c = k
    return min_c


def finish_column(col_):
    for k, v in sol_dict.items():
        for key_ in key_dict[col_]:
            if key_ in v:
                v.remove(key_)


for i in range(16):
    k1 = get_key_from_val(pbox_0, i)
    k2 = get_key_from_val(pbox_1, k1)
    k3 = get_key_from_val(pbox_2, k2)
    k4 = get_key_from_val(pbox_3, k3)
    key_dict[k4] = [k4, k3, k2, k1]
    sol_dict[k4] = [k4, k3, k2, k1]

for k_, v_ in key_dict.items():
    print '{}\t= k[{}]\tk[{}]\tk[{}]\tk[{}]'.format(k_, v_[0], v_[1], v_[2], v_[3])

col = 12
while None in solution:
    print 'Solving column {} ...'.format(col)
    solves = set(find_solve_range(col, ord(columns[col][0])))
    print 'Solves 0: {}'.format(len(solves))

    for i in range(1, len(columns[col])):
        poss = []
        for k_3, k_2, k_1, k_0 in solves:
            x = ord(columns[col][i])
            xor_3 = k_3 ^ x
            s_3 = get_key_from_val(sbox_3, xor_3)
            xor_2 = k_2 ^ s_3
            s_2 = get_key_from_val(sbox_2, xor_2)
            xor_1 = k_1 ^ s_2
            s_1 = get_key_from_val(sbox_1, xor_1)
            xor_0 = k_0 ^ s_1
            s_0 = get_key_from_val(sbox_0, xor_0)

            if 32 <= s_0 <= 127 or 9 <= s_0 <= 13:
                poss.append((k_3, k_2, k_1, k_0))
        solves = poss
        print 'Solves {}: {}'.format(i, len(poss))
        if len(poss) == 1:
            for i, key in enumerate([k for k in poss[0]]):
                idx = key_dict[col][i]
                if not solution[idx]:
                    solution[idx] = key
            finish_column(col)
            break
    col = get_col_to_solve()

print 'md5 = ' + ''.join(chr(x) for x in solution).encode('hex')
