import itertools

cipher = '9c 71 a3 5d 1f f6 12 53 d8 89 d0 27 c2 d1 67 7e d9 8a 5c 5d 94 33 df 55 6e 51 f7 27 df 08 28 94 d1 31 91 5a 1f f6 00 70 41 7c 4e f3 3b d1 91 d0 d9 e5 91 55 7a f0 df 55 c9 2f 4e 1c ea d1 de d0 31 71 5c 3c 7a f6 c2 0c 0a 60 69 28 a5 95 1f 87 6c 75 d1 c9 7a 0b 12 1b d8 64 f7 ee 41 02 9d 7c 50 07 bc f7 d1 6c 5d 55 fa a7 2c f3 72 1e 67 7e c0 8a f4 f7 cd 32 df c6 35 3b f5 90 c6 95 70 34 9c 65 af 9c eb 3f 06 52 fb 83 16 63 3b 5f 0e 8a 1f 7b be cf b0 41 df d2 07 64 d0 ee 4a 95 bc fe 9c 12 0f 11 1d f0 5d 8d 0a 64 97 f3 8e d5 37 2f 9f 58 91 3c 1f d3 df 55 a1 51 87 28 fd bb ce e9 94 71 58 3c eb 6c cf 13 8a 64 4c 56 72 1e bc 7c f2 c5 a0 de cd a3 00 13 d8 bc 97 f3 fd 15 2a dc f2 c5 58 3c 4c 0b 5d f0 a1 6d 2b 96 3b 85 85 dc 9c 81 fa fe da 33 5d 04 a9 7a dc 27 40 55 1f 94 94 71 cc 3c eb 57 f0 13 84 92 24 be e8 8c bc 43 f2 c5 6e cf 1d 41 df 75 a4 25 2b 86 e8 b2 9b fd d9 71 58 5d b0 f9 d9 0c d8 44 5d be 34 9b 67 43 5d bc 58 cf eb d3 09 55 0a 64 2c 07 c6 95 14 43 9c 71 45 3c 7a 32 09 70 eb 25 87 5d 40 6a 85 fd 9c 81 58 f7 7a 08 df 0c a4 25 0f 65 5d 95 70 fd d1 71 ab 26 45 f6 f0 88 ce 64 0f 28 ea 95 70 fe c0 81 b3 26 cd 0b 35 e3 5a 27 2b 28 ff 95 67 a9 d1 81 d1 b4 eb a3 f0 1b d8 27 e3 f3 fd 36 96 d0 9c 41 91 f7 ce 44 64 c0 d5 89 80 51 fd d1 0e fd 94 8a 06 3c 1f d3 df 0c 0a 2f 97 9e 3b 6a 64 10 d1 e5 fa cf 1f 06 d9 a1 d2 a7 97 28 3b 79 d7 7c 5d 81 e6 92 7a 79 12 0c d8 64 69 27 6a ba bd fd 6c ad 68 11 70 96 df f0 a4 3b 23 5d df 61 96 87 36 41 91 63 d1 44 64 f0 d8 78 f7 ee c2 9b d7 80 94 c5 58 52 1f 9f df 0c a4 6b 2b f3 3b 95 64 a0 d1 bc be 5d 94 0b 09 0c c9 78 ad f3 2a 95 2a 87 5f c5 be 0c 70 f6 df 70 d8 e4 2b f3 74 98 2a 80 6c c4 91 5d 7a 41 d9 d9 d8 d3 80 be 74 1e 70 94 9c 71 45 52 da 6c cf 1b ce 64 2b 90 6a 95 f9 d0 d1 f6 89 52 cd f6 97 a1 a1 a7 a8 28 fd 6a 9d 87 10 f6 35 b4 3c a3 a1 3e fa 51 97 a1 6a d1 b7 fd 4f 3c aa de cd f6 21 70 d8 83 44 be 3b 91 91 fd 9c 81 e6 b4 5d 0b 00 88 d8 83 69 07 69 ba d7 d0 f2 58 aa 55 eb 08 5d 8c d8 37 f7 90 fd ef 85 d0 9c 31 a0 26 4c 41 df 70 a4 83 97 28 41 6a 85 7e d1 71 d1 3c 7a 6c cf d9 6a 2f 87 28 5d 9b 67 34 e4 3c bc 55 cd 41 f0 1b fa a7 2c 9c fd 1e de d0 d9 71 ab 52 b0 f6 c2 55 a1 60 02 90 3b 81 74 dc d9 e5 a0 5d 94 0b b3 55 b4 3b 97 27 df 9b 67 7c d9 cd 45 5d 45 08 d9 55 d5 a7 3d 92 e8 d1 9b 1d be 67 91 26 45 44 a1 36 51 a7 d4 56 41 08 bc cf 10 66 c8 63 3c 0b 09 05 fb a7 73 d9 04 fc b7 fd 94 f6 0f 5d cd 41 a1 1b d8 89 69 ee 6a b9 d7 a8 e4 e1 5c 55 7a 0b d9 8c 6a a7 44 5d df 1e bc 6a 48 8a aa 3c cd 33 10 70 51 c6 a3 56 6a 08 91 d0 31 71 58 88 cd f9 97 55 c9 a7 2c 60 6c 15 9a 96 5d 3c 89 f7 cd 3f df 04 d5 60 5d 01 c6 7f 2a fd 31 f6 0f 3c d9 41 35 36 d8 40 61 96 fb 85 85 d0 4f 9e 91 f7 cd f0 97 70 eb e4 d0 96 6c b2 9b 41 31 81 f4 3c 1d aa df 42 d5 cc a8 90 40 15 de d0 f2 bc 91 7f 7a ae a1 13 51 83 d4 28 8d 7a 07 e1 9a 71 91 3c 94 0b df a1 d8 a7 97 f3 6a 95 5d fd'.split()
cipher = [chr(int(blah, 16)) for blah in cipher][:640]

sbox_0 = { 0 : 124, 1 : 222, 2 : 151, 3 : 54, 4 : 2, 5 : 132, 6 : 254, 7 : 8, 8 : 155, 9 : 15, 10 : 135, 11 : 24, 12 : 196, 13 : 209, 14 : 228, 15 : 43, 16 : 57, 17 : 201, 18 : 200, 19 : 18, 20 : 110, 21 : 14, 22 : 88, 23 : 130, 24 : 4, 25 : 70, 26 : 95, 27 : 193, 28 : 11, 29 : 23, 30 : 51, 31 : 138, 32 : 241, 33 : 198, 34 : 187, 35 : 244, 36 : 77, 37 : 185, 38 : 251, 39 : 227, 40 : 202, 41 : 128, 42 : 249, 43 : 141, 44 : 83, 45 : 220, 46 : 178, 47 : 136, 48 : 165, 49 : 123, 50 : 154, 51 : 27, 52 : 143, 53 : 240, 54 : 150, 55 : 145, 56 : 53, 57 : 245, 58 : 84, 59 : 63, 60 : 9, 61 : 126, 62 : 192, 63 : 248, 64 : 73, 65 : 121, 66 : 233, 67 : 147, 68 : 60, 69 : 229, 70 : 113, 71 : 7, 72 : 102, 73 : 109, 74 : 149, 75 : 186, 76 : 79, 77 : 74, 78 : 69, 79 : 247, 80 : 205, 81 : 223, 82 : 20, 83 : 91, 84 : 212, 85 : 168, 86 : 236, 87 : 13, 88 : 160, 89 : 66, 90 : 72, 91 : 169, 92 : 197, 93 : 19, 94 : 162, 95 : 26, 96 : 140, 97 : 139, 98 : 170, 99 : 206, 100 : 112, 101 : 36, 102 : 213, 103 : 225, 104 : 144, 105 : 99, 106 : 159, 107 : 226, 108 : 177, 109 : 232, 110 : 217, 111 : 117, 112 : 195, 113 : 238, 114 : 216, 115 : 156, 116 : 137, 117 : 199, 118 : 167, 119 : 49, 120 : 28, 121 : 252, 122 : 218, 123 : 215, 124 : 10, 125 : 114, 126 : 242, 127 : 133, 128 : 29, 129 : 142, 130 : 92, 131 : 119, 132 : 180, 133 : 55, 134 : 97, 135 : 71, 136 : 161, 137 : 22, 138 : 48, 139 : 85, 140 : 255, 141 : 31, 142 : 219, 143 : 189, 144 : 6, 145 : 182, 146 : 98, 147 : 152, 148 : 127, 149 : 35, 150 : 210, 151 : 164, 152 : 33, 153 : 179, 154 : 118, 155 : 40, 156 : 62, 157 : 108, 158 : 183, 159 : 81, 160 : 38, 161 : 44, 162 : 234, 163 : 224, 164 : 93, 165 : 82, 166 : 52, 167 : 21, 168 : 101, 169 : 104, 170 : 105, 171 : 96, 172 : 129, 173 : 76, 174 : 50, 175 : 148, 176 : 30, 177 : 172, 178 : 56, 179 : 175, 180 : 203, 181 : 17, 182 : 89, 183 : 235, 184 : 208, 185 : 239, 186 : 12, 187 : 34, 188 : 107, 189 : 204, 190 : 111, 191 : 153, 192 : 0, 193 : 87, 194 : 116, 195 : 94, 196 : 188, 197 : 176, 198 : 120, 199 : 46, 200 : 42, 201 : 246, 202 : 163, 203 : 181, 204 : 65, 205 : 214, 206 : 67, 207 : 90, 208 : 125, 209 : 122, 210 : 32, 211 : 68, 212 : 166, 213 : 115, 214 : 58, 215 : 103, 216 : 100, 217 : 61, 218 : 158, 219 : 237, 220 : 25, 221 : 3, 222 : 146, 223 : 39, 224 : 106, 225 : 1, 226 : 173, 227 : 47, 228 : 207, 229 : 16, 230 : 131, 231 : 243, 232 : 5, 233 : 37, 234 : 190, 235 : 86, 236 : 231, 237 : 250, 238 : 194, 239 : 134, 240 : 157, 241 : 230, 242 : 191, 243 : 41, 244 : 78, 245 : 253, 246 : 171, 247 : 211, 248 : 64, 249 : 45, 250 : 184, 251 : 80, 252 : 59, 253 : 75, 254 : 221, 255 : 174 }
sbox_1 = { 0 : 53, 1 : 33, 2 : 193, 3 : 239, 4 : 51, 5 : 36, 6 : 212, 7 : 61, 8 : 41, 9 : 115, 10 : 145, 11 : 9, 12 : 96, 13 : 84, 14 : 119, 15 : 209, 16 : 49, 17 : 52, 18 : 226, 19 : 144, 20 : 47, 21 : 105, 22 : 95, 23 : 127, 24 : 130, 25 : 15, 26 : 233, 27 : 162, 28 : 72, 29 : 126, 30 : 45, 31 : 129, 32 : 160, 33 : 240, 34 : 109, 35 : 206, 36 : 17, 37 : 67, 38 : 7, 39 : 63, 40 : 181, 41 : 158, 42 : 74, 43 : 13, 44 : 236, 45 : 187, 46 : 223, 47 : 26, 48 : 235, 49 : 194, 50 : 172, 51 : 25, 52 : 39, 53 : 4, 54 : 152, 55 : 168, 56 : 23, 57 : 131, 58 : 73, 59 : 98, 60 : 248, 61 : 116, 62 : 217, 63 : 150, 64 : 99, 65 : 71, 66 : 101, 67 : 118, 68 : 137, 69 : 108, 70 : 178, 71 : 55, 72 : 0, 73 : 243, 74 : 70, 75 : 237, 76 : 175, 77 : 32, 78 : 6, 79 : 155, 80 : 224, 81 : 182, 82 : 179, 83 : 8, 84 : 188, 85 : 75, 86 : 174, 87 : 207, 88 : 196, 89 : 234, 90 : 42, 91 : 184, 92 : 92, 93 : 255, 94 : 77, 95 : 189, 96 : 68, 97 : 165, 98 : 40, 99 : 200, 100 : 14, 101 : 214, 102 : 247, 103 : 16, 104 : 198, 105 : 59, 106 : 249, 107 : 112, 108 : 90, 109 : 253, 110 : 254, 111 : 57, 112 : 170, 113 : 167, 114 : 64, 115 : 103, 116 : 230, 117 : 222, 118 : 46, 119 : 164, 120 : 204, 121 : 88, 122 : 97, 123 : 37, 124 : 89, 125 : 157, 126 : 219, 127 : 147, 128 : 78, 129 : 3, 130 : 93, 131 : 86, 132 : 215, 133 : 82, 134 : 106, 135 : 154, 136 : 135, 137 : 91, 138 : 10, 139 : 213, 140 : 87, 141 : 5, 142 : 18, 143 : 252, 144 : 180, 145 : 76, 146 : 113, 147 : 159, 148 : 43, 149 : 146, 150 : 79, 151 : 244, 152 : 227, 153 : 163, 154 : 29, 155 : 58, 156 : 69, 157 : 250, 158 : 203, 159 : 140, 160 : 1, 161 : 35, 162 : 216, 163 : 218, 164 : 124, 165 : 60, 166 : 132, 167 : 238, 168 : 142, 169 : 134, 170 : 197, 171 : 220, 172 : 136, 173 : 205, 174 : 211, 175 : 50, 176 : 24, 177 : 65, 178 : 201, 179 : 80, 180 : 192, 181 : 22, 182 : 56, 183 : 173, 184 : 183, 185 : 102, 186 : 229, 187 : 246, 188 : 94, 189 : 171, 190 : 133, 191 : 100, 192 : 208, 193 : 107, 194 : 31, 195 : 81, 196 : 148, 197 : 156, 198 : 48, 199 : 21, 200 : 27, 201 : 251, 202 : 241, 203 : 153, 204 : 195, 205 : 199, 206 : 191, 207 : 225, 208 : 12, 209 : 149, 210 : 34, 211 : 202, 212 : 169, 213 : 111, 214 : 125, 215 : 120, 216 : 161, 217 : 114, 218 : 110, 219 : 245, 220 : 20, 221 : 228, 222 : 66, 223 : 231, 224 : 54, 225 : 122, 226 : 38, 227 : 186, 228 : 11, 229 : 121, 230 : 221, 231 : 44, 232 : 123, 233 : 190, 234 : 177, 235 : 30, 236 : 151, 237 : 141, 238 : 19, 239 : 176, 240 : 83, 241 : 85, 242 : 139, 243 : 232, 244 : 138, 245 : 2, 246 : 117, 247 : 104, 248 : 143, 249 : 210, 250 : 62, 251 : 166, 252 : 185, 253 : 128, 254 : 28, 255 : 242 }

pbox_0 = { 0 : 7, 1 : 14, 2 : 9, 3 : 2, 4 : 0, 5 : 8, 6 : 15, 7 : 1, 8 : 10, 9 : 3, 10 : 11, 11 : 4, 12 : 13, 13 : 12, 14 : 6, 15 : 5, }
pbox_1 = { 0 : 3, 1 : 12, 2 : 13, 3 : 0, 4 : 7, 5 : 1, 6 : 6, 7 : 9, 8 : 2, 9 : 5, 10 : 10, 11 : 14, 12 : 4, 13 : 8, 14 : 11, 15 : 15, }

blocks = [cipher[i:i + 16] for i in range(0, len(cipher), 16)]
columns = list(itertools.izip_longest(*blocks))

def get_key_from_val(d, val):
    for k,v in d.iteritems():
        if v==val:
            return k;

def find_solve_range(x):
    poss = []
    for k_o in range(256):
        xor_o = k_o ^ x
        s_o = get_key_from_val(sbox_1, xor_o)
        for k_i in range(256):
            xor_i = k_i ^ s_o
            s_i = get_key_from_val(sbox_0, xor_i)
            if 9 <= s_i <= 13 or 32 <= s_i <= 127:
                poss.append((k_i, k_o))
    return poss

r = []
for i, column in enumerate(columns):
    print 'Solving column {} ...'.format(i)
    bunches = [set(find_solve_range(ord(c))) for c in set(column)]
    intersect = set.intersection(*bunches)
    for _, key in intersect:
        r.append(chr(key))


print ''.join(r).encode('hex')
